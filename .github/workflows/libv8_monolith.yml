# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Run a multi-line script
        id: build
        env:
          SUPER_SECRET: ${{ secrets.PAT }}
        run: |
          echo "::set-output name=tagname::v8-8.8"
          echo "::set-output name=releasename::Release v8-8.8-linux-amd64"
          echo docker build -t v8-build .
          ## copy libs and includes from docker image
          mkdir -p deps/v8
          mkdir -p debian
          docker run -dt --rm --name v8-build v8-build /bin/sh
          docker cp v8-build:/build/v8/out.gn/x64.release/obj/libv8_monolith.a debian/libv8_monolith.a
          docker cp v8-build:/build/v8/include deps/v8/
          ## Always fail till we have all parts in place
          exit 1
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build.outputs.tagname }}
          release_name: ${{ steps.build.outputs.releasename }}
          draft: true
          prerelease: true
      - name: Upload Build
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ steps.build.outputs.name }}-amd64.tgz
          asset_name: ${{ steps.build.outputs.name }}-amd64.tgz
          asset_content_type: application/gzip 

# This is a basic workflow to help you get started with Actions

name: CI-alpine

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Run a multi-line script
        id: build
        env:
          SUPER_SECRET: ${{ secrets.PAT }}
        run: |
          echo "::set-output name=tagname::v8-8.8"
          echo "::set-output name=releasename::Release v8-8.8-linux-amd64"
          # v8lib: ## build v8 library
          docker build -t v8-build-alpine -f Dockerfile.alpine .
          mkdir -p deps/v8
          mkdir -p alpine
          docker run -dt --rm --name v8-build v8-build /bin/sh
          docker cp v8-build:/build/v8/out.gn/x64.release/obj/libv8_monolith.a deps/v8/libv8_monolith.a
          docker cp v8-build:/build/v8/include deps/v8/
          docker cp v8-build:/build/v8/src deps/v8/
          docker cp v8-build:/build/v8/out.gn/x64.release/gen deps/v8/
          ## dist header
          tar -cv deps/v8/include | gzip --best > libv8-8.8-headers.tar.gz
          ## dist lib
          tar -cv deps/v8/libv8_monolith.a deps/v8/include | gzip --best > libv8-alpine-amd64.tar.gz
          ## dist src
          tar -cv deps/v8/gen deps/v8/src | gzip --best > libv8src.tar.gz
          ls -ahl .
          docker kill v8-build
          ## Always fail till we have all parts in place
          exit 1
